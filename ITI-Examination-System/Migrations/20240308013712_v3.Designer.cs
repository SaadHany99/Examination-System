// <auto-generated />
using System;
using ITI_ExaminationSystem.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ITI_Examination_System.Migrations
{
    [DbContext(typeof(ExaminationSystemContext))]
    [Migration("20240308013712_v3")]
    partial class v3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ITI_ExaminationSystem.Models.Branch", b =>
                {
                    b.Property<int>("Branch_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Branch_ID"));

                    b.Property<string>("Branch_Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Branch_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Branch_ID");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("ITI_ExaminationSystem.Models.Branch_Tracks", b =>
                {
                    b.Property<int>("Branch_ID")
                        .HasColumnType("int");

                    b.Property<int>("Track_ID")
                        .HasColumnType("int");

                    b.HasKey("Branch_ID", "Track_ID");

                    b.HasIndex("Track_ID");

                    b.ToTable("Branch_Tracks");
                });

            modelBuilder.Entity("ITI_ExaminationSystem.Models.Course", b =>
                {
                    b.Property<int>("Course_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Course_ID"));

                    b.Property<int>("Course_Duration")
                        .HasColumnType("int");

                    b.Property<string>("Course_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Instructor_ID")
                        .HasColumnType("int");

                    b.Property<int>("Topic_ID")
                        .HasColumnType("int");

                    b.HasKey("Course_ID");

                    b.HasIndex("Instructor_ID");

                    b.HasIndex("Topic_ID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("ITI_ExaminationSystem.Models.Exam", b =>
                {
                    b.Property<int>("Exam_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Exam_ID"));

                    b.Property<int>("Course_ID")
                        .HasColumnType("int");

                    b.Property<int>("Exam_Duration")
                        .HasColumnType("int");

                    b.Property<int>("Instructor_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start_Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Exam_ID");

                    b.HasIndex("Course_ID");

                    b.HasIndex("Instructor_ID");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("ITI_ExaminationSystem.Models.Exam_Questions", b =>
                {
                    b.Property<int>("Exam_ID")
                        .HasColumnType("int");

                    b.Property<int>("Question_ID")
                        .HasColumnType("int");

                    b.HasKey("Exam_ID", "Question_ID");

                    b.HasIndex("Question_ID");

                    b.ToTable("Exam_Questions");
                });

            modelBuilder.Entity("ITI_ExaminationSystem.Models.Instructor", b =>
                {
                    b.Property<int>("Instructor_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Instructor_ID"));

                    b.Property<int>("Branch_ID")
                        .HasColumnType("int");

                    b.Property<string>("Instructor_Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<byte[]>("Instructor_Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Instructor_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Instructor_Salary")
                        .HasColumnType("money");

                    b.Property<int>("User_ID")
                        .HasColumnType("int");

                    b.HasKey("Instructor_ID");

                    b.HasIndex("Branch_ID");

                    b.HasIndex("User_ID")
                        .IsUnique();

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("ITI_ExaminationSystem.Models.Instructor_Tracks", b =>
                {
                    b.Property<int>("InstructorTrack_ID")
                        .HasColumnType("int");

                    b.Property<int>("Track_ID")
                        .HasColumnType("int");

                    b.HasKey("InstructorTrack_ID", "Track_ID");

                    b.HasIndex("Track_ID");

                    b.ToTable("Instructor_Tracks");
                });

            modelBuilder.Entity("ITI_ExaminationSystem.Models.Question", b =>
                {
                    b.Property<int>("Question_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Question_ID"));

                    b.Property<int>("Course_ID")
                        .HasColumnType("int");

                    b.Property<int>("Instructor_ID")
                        .HasColumnType("int");

                    b.Property<string>("Model_Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question_Header")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question_Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("Question_ID");

                    b.HasIndex("Course_ID");

                    b.HasIndex("Instructor_ID");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("ITI_ExaminationSystem.Models.Question_Choices", b =>
                {
                    b.Property<int>("Question_ID")
                        .HasColumnType("int");

                    b.Property<int>("Choice_ID")
                        .HasColumnType("int");

                    b.Property<string>("Choice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Question_ID", "Choice_ID");

                    b.ToTable("Question_Choices");
                });

            modelBuilder.Entity("ITI_ExaminationSystem.Models.Student", b =>
                {
                    b.Property<int>("Student_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Student_ID"));

                    b.Property<int>("Branch_ID")
                        .HasColumnType("int");

                    b.Property<int>("Student_Age")
                        .HasColumnType("int");

                    b.Property<string>("Student_Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<byte[]>("Student_Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Student_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Track_ID")
                        .HasColumnType("int");

                    b.Property<int>("User_ID")
                        .HasColumnType("int");

                    b.HasKey("Student_ID");

                    b.HasIndex("Branch_ID");

                    b.HasIndex("Track_ID");

                    b.HasIndex("User_ID")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("ITI_ExaminationSystem.Models.Student_Exams", b =>
                {
                    b.Property<int>("Student_ID")
                        .HasColumnType("int");

                    b.Property<int>("Exam_ID")
                        .HasColumnType("int");

                    b.Property<int?>("Student_Degree")
                        .HasColumnType("int");

                    b.HasKey("Student_ID", "Exam_ID");

                    b.HasIndex("Exam_ID");

                    b.ToTable("Student_Exams");
                });

            modelBuilder.Entity("ITI_ExaminationSystem.Models.Topic", b =>
                {
                    b.Property<int>("Topic_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Topic_ID"));

                    b.Property<string>("Topic_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Topic_ID");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("ITI_ExaminationSystem.Models.Track", b =>
                {
                    b.Property<int>("Track_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Track_ID"));

                    b.Property<string>("Track_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Track_ID");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("ITI_ExaminationSystem.Models.Track_Courses", b =>
                {
                    b.Property<int>("Track_ID")
                        .HasColumnType("int");

                    b.Property<int>("Course_ID")
                        .HasColumnType("int");

                    b.HasKey("Track_ID", "Course_ID");

                    b.HasIndex("Course_ID");

                    b.ToTable("Track_Courses");
                });

            modelBuilder.Entity("ITI_ExaminationSystem.Models.UserAccount", b =>
                {
                    b.Property<int>("User_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("User_ID"));

                    b.Property<string>("Account_Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("User_Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("User_Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("User_ID");

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("ITI_Examination_System.Models.Student_Answers", b =>
                {
                    b.Property<int>("Student_ID")
                        .HasColumnType("int");

                    b.Property<int>("Exam_ID")
                        .HasColumnType("int");

                    b.Property<int>("Question_ID")
                        .HasColumnType("int");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Student_ID", "Exam_ID", "Question_ID");

                    b.HasIndex("Exam_ID");

                    b.HasIndex("Question_ID");

                    b.ToTable("Student_Answers");
                });

            modelBuilder.Entity("ITI_ExaminationSystem.Models.Branch_Tracks", b =>
                {
                    b.HasOne("ITI_ExaminationSystem.Models.Branch", "branch")
                        .WithMany("Branches")
                        .HasForeignKey("Branch_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ITI_ExaminationSystem.Models.Track", "track")
                        .WithMany("Branches")
                        .HasForeignKey("Track_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("branch");

                    b.Navigation("track");
                });

            modelBuilder.Entity("ITI_ExaminationSystem.Models.Course", b =>
                {
                    b.HasOne("ITI_ExaminationSystem.Models.Instructor", "instructor")
                        .WithMany("Courses")
                        .HasForeignKey("Instructor_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ITI_ExaminationSystem.Models.Topic", "topic")
                        .WithMany("Courses")
                        .HasForeignKey("Topic_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("instructor");

                    b.Navigation("topic");
                });

            modelBuilder.Entity("ITI_ExaminationSystem.Models.Exam", b =>
                {
                    b.HasOne("ITI_ExaminationSystem.Models.Course", "course")
                        .WithMany("Exams")
                        .HasForeignKey("Course_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ITI_ExaminationSystem.Models.Instructor", "instructor")
                        .WithMany("Exams")
                        .HasForeignKey("Instructor_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("course");

                    b.Navigation("instructor");
                });

            modelBuilder.Entity("ITI_ExaminationSystem.Models.Exam_Questions", b =>
                {
                    b.HasOne("ITI_ExaminationSystem.Models.Exam", "exam")
                        .WithMany("Exams")
                        .HasForeignKey("Exam_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ITI_ExaminationSystem.Models.Question", "question")
                        .WithMany("Exams")
                        .HasForeignKey("Question_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("exam");

                    b.Navigation("question");
                });

            modelBuilder.Entity("ITI_ExaminationSystem.Models.Instructor", b =>
                {
                    b.HasOne("ITI_ExaminationSystem.Models.Branch", "branch")
                        .WithMany("Instructors")
                        .HasForeignKey("Branch_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ITI_ExaminationSystem.Models.UserAccount", "User")
                        .WithOne("instructor")
                        .HasForeignKey("ITI_ExaminationSystem.Models.Instructor", "User_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("branch");
                });

            modelBuilder.Entity("ITI_ExaminationSystem.Models.Instructor_Tracks", b =>
                {
                    b.HasOne("ITI_ExaminationSystem.Models.Instructor", "instructor")
                        .WithMany("Instructors")
                        .HasForeignKey("InstructorTrack_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ITI_ExaminationSystem.Models.Track", "track")
                        .WithMany("Instructors")
                        .HasForeignKey("Track_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("instructor");

                    b.Navigation("track");
                });

            modelBuilder.Entity("ITI_ExaminationSystem.Models.Question", b =>
                {
                    b.HasOne("ITI_ExaminationSystem.Models.Course", "course")
                        .WithMany("Questions")
                        .HasForeignKey("Course_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ITI_ExaminationSystem.Models.Instructor", "instructor")
                        .WithMany("Questions")
                        .HasForeignKey("Instructor_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("course");

                    b.Navigation("instructor");
                });

            modelBuilder.Entity("ITI_ExaminationSystem.Models.Question_Choices", b =>
                {
                    b.HasOne("ITI_ExaminationSystem.Models.Question", "question")
                        .WithMany("Questions")
                        .HasForeignKey("Question_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("question");
                });

            modelBuilder.Entity("ITI_ExaminationSystem.Models.Student", b =>
                {
                    b.HasOne("ITI_ExaminationSystem.Models.Branch", "branch")
                        .WithMany("Students")
                        .HasForeignKey("Branch_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ITI_ExaminationSystem.Models.Track", "track")
                        .WithMany("Students")
                        .HasForeignKey("Track_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ITI_ExaminationSystem.Models.UserAccount", "User")
                        .WithOne("student")
                        .HasForeignKey("ITI_ExaminationSystem.Models.Student", "User_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("branch");

                    b.Navigation("track");
                });

            modelBuilder.Entity("ITI_ExaminationSystem.Models.Student_Exams", b =>
                {
                    b.HasOne("ITI_ExaminationSystem.Models.Exam", "exam")
                        .WithMany("Students")
                        .HasForeignKey("Exam_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ITI_ExaminationSystem.Models.Student", "student")
                        .WithMany("Students")
                        .HasForeignKey("Student_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("exam");

                    b.Navigation("student");
                });

            modelBuilder.Entity("ITI_ExaminationSystem.Models.Track_Courses", b =>
                {
                    b.HasOne("ITI_ExaminationSystem.Models.Course", "course")
                        .WithMany("Tracks")
                        .HasForeignKey("Course_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ITI_ExaminationSystem.Models.Track", "track")
                        .WithMany("Tracks")
                        .HasForeignKey("Track_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("course");

                    b.Navigation("track");
                });

            modelBuilder.Entity("ITI_Examination_System.Models.Student_Answers", b =>
                {
                    b.HasOne("ITI_ExaminationSystem.Models.Exam", "exam")
                        .WithMany("student_answers")
                        .HasForeignKey("Exam_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ITI_ExaminationSystem.Models.Question", "question")
                        .WithMany("student_answers")
                        .HasForeignKey("Question_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ITI_ExaminationSystem.Models.Student", "student")
                        .WithMany("student_answers")
                        .HasForeignKey("Student_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("exam");

                    b.Navigation("question");

                    b.Navigation("student");
                });

            modelBuilder.Entity("ITI_ExaminationSystem.Models.Branch", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Instructors");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("ITI_ExaminationSystem.Models.Course", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("Questions");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("ITI_ExaminationSystem.Models.Exam", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("Students");

                    b.Navigation("student_answers");
                });

            modelBuilder.Entity("ITI_ExaminationSystem.Models.Instructor", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Exams");

                    b.Navigation("Instructors");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ITI_ExaminationSystem.Models.Question", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("Questions");

                    b.Navigation("student_answers");
                });

            modelBuilder.Entity("ITI_ExaminationSystem.Models.Student", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("student_answers");
                });

            modelBuilder.Entity("ITI_ExaminationSystem.Models.Topic", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("ITI_ExaminationSystem.Models.Track", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Instructors");

                    b.Navigation("Students");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("ITI_ExaminationSystem.Models.UserAccount", b =>
                {
                    b.Navigation("instructor")
                        .IsRequired();

                    b.Navigation("student")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
